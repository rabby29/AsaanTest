/* This file was generated by the ServiceGenerator.
 * The ServiceGenerator is Copyright (c) 2014 Google Inc.
 */

//
//  GTLQueryPersonendpoint.m
//

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   personendpoint/v1
// Description:
//   This is an API
// Classes:
//   GTLQueryPersonendpoint (8 custom class methods, 6 custom properties)

#import "GTLQueryPersonendpoint.h"

#import "GTLPersonendpointBooleanWrapper.h"
#import "GTLPersonendpointDeviceInfo.h"
#import "GTLPersonendpointPersonCardsListWrapper.h"
#import "GTLPersonendpointPersonInfoWrapper.h"

@implementation GTLQueryPersonendpoint

@dynamic email, fields, gcmMessage, gcmRegistrationId, password, personId;

#pragma mark -
#pragma mark Service level methods
// These create a GTLQueryPersonendpoint object.

+ (id)queryForGetDeviceInfoByGCMRegistrationIdWithGcmRegistrationId:(NSString *)gcmRegistrationId {
  NSString *methodName = @"personendpoint.getDeviceInfoByGCMRegistrationId";
  GTLQueryPersonendpoint *query = [self queryWithMethodName:methodName];
  query.gcmRegistrationId = gcmRegistrationId;
  query.expectedObjectClass = [GTLPersonendpointDeviceInfo class];
  return query;
}

+ (id)queryForNativeLoginWithObject:(GTLPersonendpointDeviceInfo *)object
                              email:(NSString *)email
                           password:(NSString *)password {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"personendpoint.nativeLogin";
  GTLQueryPersonendpoint *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.email = email;
  query.password = password;
  query.expectedObjectClass = [GTLPersonendpointPersonInfoWrapper class];
  return query;
}

+ (id)queryForNativeSignupWithObject:(GTLPersonendpointPersonInfoWrapper *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"personendpoint.nativeSignup";
  GTLQueryPersonendpoint *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLPersonendpointPersonInfoWrapper class];
  return query;
}

+ (id)queryForPersonExistsWithEmail:(NSString *)email {
  NSString *methodName = @"personendpoint.personExists";
  GTLQueryPersonendpoint *query = [self queryWithMethodName:methodName];
  query.email = email;
  query.expectedObjectClass = [GTLPersonendpointBooleanWrapper class];
  return query;
}

+ (id)queryForReplacePersonCardsWithObject:(GTLPersonendpointPersonCardsListWrapper *)object
                                  personId:(long long)personId {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"personendpoint.replacePersonCards";
  GTLQueryPersonendpoint *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.personId = personId;
  return query;
}

+ (id)queryForSaveGCMMessageWithGcmRegistrationId:(NSString *)gcmRegistrationId
                                       gcmMessage:(NSString *)gcmMessage {
  NSString *methodName = @"personendpoint.saveGCMMessage";
  GTLQueryPersonendpoint *query = [self queryWithMethodName:methodName];
  query.gcmRegistrationId = gcmRegistrationId;
  query.gcmMessage = gcmMessage;
  return query;
}

+ (id)queryForSocialSignupWithObject:(GTLPersonendpointPersonInfoWrapper *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"personendpoint.socialSignup";
  GTLQueryPersonendpoint *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLPersonendpointPersonInfoWrapper class];
  return query;
}

+ (id)queryForUpdateDeviceInfoWithObject:(GTLPersonendpointDeviceInfo *)object {
  if (object == nil) {
    GTL_DEBUG_ASSERT(object != nil, @"%@ got a nil object", NSStringFromSelector(_cmd));
    return nil;
  }
  NSString *methodName = @"personendpoint.updateDeviceInfo";
  GTLQueryPersonendpoint *query = [self queryWithMethodName:methodName];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLPersonendpointDeviceInfo class];
  return query;
}

@end
